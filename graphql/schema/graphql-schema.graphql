#graphql

# https://the-guild.dev/graphql/tools/docs/schema-directives#enforcing-access-permissions
# create a auth directive which checks for a role 
directive @login (
  requires: Role = USER
) on OBJECT | FIELD_DEFINITION

directive @register (
  requires: Role = USER
) on OBJECT | FIELD_DEFINITION

directive @auth (
  requires: Role = USER
) on OBJECT | FIELD_DEFINITION

# role types
enum Role {
  USER
  UNKNOWN
}

enum ItemCategories {
  SHELVES
  ART
  BEDS
  CHAIRS
  TABLES
}

type Book {
  title: String
  author: String
}

type loginUser {
  email: String!
  password: String!
  username: String!
}

type registerUser {
  email: String!
  password: String!
  username: String!
  id: String
}

type User @auth( requires: USER ) {
  email: String!
  password: String!
  username: String!
}

type createItem {
  id: String
  title: String!
  img: String!
  desc: String
  category: ItemCategories!
  reviews: [review]
}

type review {
  id: String
  item_id: String!
  text: String!
  author: String
  created_at: String
}

# The "Query" type is special: it lists all of the available queries that

# clients can execute, along with the return type for each.

type Query {
  books: [Book]
  hello: String
  user: User
  login( email: String!, password: String! ): loginUser @login
  register( 
    email: String!, 
    password: String!, 
    username: String!
  ): registerUser @register @login
  getItems( category: ItemCategories! ): [createItem]
  getItem( id: String! ): createItem
  getReviews( item_id: String! ): [review]! @auth
}

type Mutation {
  newItem( 
    title: String!, 
    img: String!, 
    desc: String 
    category: ItemCategories!
  ): createItem @auth

  createReview(
    id: String
    text: String!
    author: String
    created_at: String
    item_id: String!
  ): review @auth
}
